"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { ArrowLeft, Brain, RefreshCw, Play, Download, Code, Sparkles, AlertCircle } from "lucide-react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Slider } from "@/components/ui/slider"
import CyberButton from "@/components/cyber-button"
import MatrixBackground from "@/components/matrix-background"
import CircuitPattern from "@/components/circuit-pattern"
import DataPulse from "@/components/data-pulse"
import GlitchText from "@/components/glitch-text"
import CyberCard from "@/components/cyber-card"
import TierGate from "@/components/tier-gate"
import { useWallet } from "@/context/wallet-context"
import WalletConnector from "@/components/wallet-connector"
import TerminalCode from "@/components/terminal-code"

export default function AiStrategyPage() {
  const { connected } = useWallet()
  const [isGenerating, setIsGenerating] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [strategyPrompt, setStrategyPrompt] = useState("")
  const [riskLevel, setRiskLevel] = useState(50)
  const [timeframe, setTimeframe] = useState("1h")
  const [market, setMarket] = useState("SOL-USDC")
  const [generatedStrategy, setGeneratedStrategy] = useState<string | null>(null)
  const [generatedCode, setGeneratedCode] = useState<string | null>(null)
  const [backtestResults, setBacktestResults] = useState<any | null>(null)

  // Load initial data
  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true)
      try {
        // Simulate API call delay
        await new Promise((resolve) => setTimeout(resolve, 1500))
      } finally {
        setIsLoading(false)
      }
    }

    loadData()
  }, [])

  // Handle strategy generation
  const generateStrategy = async () => {
    if (isGenerating || !strategyPrompt) return

    setIsGenerating(true)
    setGeneratedStrategy(null)
    setGeneratedCode(null)
    setBacktestResults(null)

    try {
      // Simulate API call delay
      await new Promise((resolve) => setTimeout(resolve, 3000))

      // Generate strategy based on prompt and parameters
      const strategy = `# ${market} ${timeframe} Trading Strategy

## Strategy Overview
This strategy implements a momentum-based approach with volatility filters for ${market} on the ${timeframe} timeframe. The risk profile is set to ${riskLevel}% (${riskLevel < 30 ? "Conservative" : riskLevel < 70 ? "Moderate" : "Aggressive"}).

## Entry Conditions
- Price crosses above the 20-period EMA
- RSI(14) is above 50 but below 70
- Volume is above the 20-period average volume
- Volatility (ATR) is within acceptable range

## Exit Conditions
- Price crosses below the 20-period EMA
- RSI(14) drops below 45
- Trailing stop loss of 2.5%
- Take profit at 1.5:1 reward-to-risk ratio

## Risk Management
- Position sizing: ${riskLevel / 10}% of available capital per trade
- Maximum drawdown limit: ${riskLevel / 2}%
- Maximum open positions: ${Math.max(1, Math.floor(riskLevel / 20))}

## Market Conditions
This strategy performs best in trending markets with moderate volatility. It's designed to capture momentum while managing downside risk through technical filters.`

      setGeneratedStrategy(strategy)

      // Generate code
      const code = `// ${market} ${timeframe} Trading Strategy
// Risk Level: ${riskLevel}%
// Generated by $BLKBOX AI Strategy Lab

import { createStrategy } from '@blkbox/trading-core';
import { EMA, RSI, ATR, SMA } from '@blkbox/indicators';

export const strategy = createStrategy({
  id: 'momentum_volatility_filter',
  name: 'Momentum Strategy with Volatility Filter',
  description: 'A momentum-based approach with volatility filters',
  timeframe: '${timeframe}',
  
  // Initialize indicators
  init: (context) => {
    context.ema20 = EMA(20);
    context.rsi14 = RSI(14);
    context.atr14 = ATR(14);
    context.volSMA20 = SMA(20);
    
    // Risk parameters
    context.positionSize = ${riskLevel / 10}; // % of capital
    context.maxDrawdown = ${riskLevel / 2}; // %
    context.maxPositions = ${Math.max(1, Math.floor(riskLevel / 20))};
    context.trailingStop = 2.5; // %
    context.takeProfit = 3.75; // % (1.5:1 reward-to-risk)
  },
  
  // Entry logic
  onCandle: (candle, context) => {
    // Update indicators
    const ema = context.ema20.update(candle.close);
    const rsi = context.rsi14.update(candle.close);
    const atr = context.atr14.update(candle.high, candle.low, candle.close);
    const volSMA = context.volSMA20.update(candle.volume);
    
    // Store previous values
    const prevEma = context.ema20.result[context.ema20.result.length - 2];
    
    // Check for entry conditions
    const priceAboveEma = candle.close > ema;
    const prevPriceBelowEma = context.prevClose < prevEma;
    const emaCrossover = prevPriceBelowEma && priceAboveEma;
    const rsiFilter = rsi > 50 && rsi < 70;
    const volumeFilter = candle.volume > volSMA;
    
    // Check for exit conditions
    const priceBelowEma = candle.close < ema;
    const prevPriceAboveEma = context.prevClose > prevEma;
    const emaCrossUnder = prevPriceAboveEma && priceBelowEma;
    const rsiExit = rsi < 45;
    
    // Store current close for next candle
    context.prevClose = candle.close;
    
    // Entry logic
    if (!context.position && emaCrossover && rsiFilter && volumeFilter) {
      return {
        type: 'entry',
        direction: 'long',
        size: context.positionSize,
        stopLoss: candle.close * (1 - context.trailingStop / 100),
        takeProfit: candle.close * (1 + context.takeProfit / 100)
      };
    }
    
    // Exit logic
    if (context.position && (emaCrossUnder || rsiExit)) {
      return {
        type: 'exit',
        reason: emaCrossUnder ? 'ema_cross_under' : 'rsi_exit'
      };
    }
    
    // Update trailing stop if in position
    if (context.position) {
      const newStopPrice = candle.close * (1 - context.trailingStop / 100);
      if (newStopPrice > context.position.stopLoss) {
        return {
          type: 'update_stop',
          stopLoss: newStopPrice
        };
      }
    }
  }
});`

      setGeneratedCode(code)

      // Generate backtest results
      const backtest = {
        totalTrades: 42,
        winRate: 62.5,
        profitFactor: 1.85,
        sharpeRatio: 1.32,
        maxDrawdown: 12.8,
        annualizedReturn: 28.4,
        monthlyReturns: [3.2, -1.8, 4.5, 2.1, -2.4, 5.6, 1.9, 3.3, -0.8, 4.2, 2.7, 3.1],
      }

      setBacktestResults(backtest)
    } catch (error) {
      console.error("Strategy generation failed:", error)
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className="flex min-h-screen flex-col bg-black text-white">
      <MatrixBackground />
      <CircuitPattern />

      {/* Navigation */}
      <header className="sticky top-0 z-50 border-b border-neon-pink/30 bg-black/80 backdrop-blur-md">
        <div className="container flex h-16 items-center justify-between">
          <Link
            href="/dashboard"
            className="flex items-center gap-2 text-neon-cyan hover:text-neon-pink transition-colors"
          >
            <ArrowLeft size={16} />
            <span className="font-tech-mono">BACK_TO_DASHBOARD</span>
          </Link>

          <WalletConnector buttonSize="sm" glowColor="cyan" />
        </div>
      </header>

      <main className="flex-1 container py-12">
        <TierGate requiredTier="ENTRY_LEVEL">
          <div className="max-w-6xl mx-auto">
            <div className="mb-8 text-center">
              <GlitchText
                text="AI STRATEGY LAB"
                className="text-3xl font-extrabold tracking-tight sm:text-4xl text-neon-pink mb-4"
              />
              <p className="text-neon-cyan font-tech-mono">
                GENERATE CUSTOM TRADING ALGORITHMS TUNED TO YOUR RISK PROFILE
              </p>
              <DataPulse className="my-6" />
            </div>

            <div className="grid md:grid-cols-3 gap-6">
              <div className="md:col-span-1">
                <CyberCard className="bg-black/60">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="p-3 rounded-full bg-neon-pink/10">
                      <Brain className="h-6 w-6 text-neon-pink" />
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-neon-pink">Strategy Generator</h3>
                      <p className="text-zinc-400 font-tech-mono text-sm">Create custom trading algorithms</p>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div className="space-y-2">
                      <label className="text-sm font-tech-mono text-neon-cyan">Strategy Description</label>
                      <Textarea
                        placeholder="Describe your trading strategy in natural language..."
                        className="bg-black border-zinc-800 focus:border-neon-pink min-h-[100px]"
                        value={strategyPrompt}
                        onChange={(e) => setStrategyPrompt(e.target.value)}
                      />
                      <p className="text-xs text-zinc-500 font-tech-mono">
                        Example: "A momentum strategy that buys when price crosses above the 20 EMA with RSI above 50"
                      </p>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-tech-mono text-neon-cyan">Market</label>
                      <Select value={market} onValueChange={setMarket}>
                        <SelectTrigger className="bg-black border-zinc-800">
                          <SelectValue placeholder="Select market" />
                        </SelectTrigger>
                        <SelectContent className="bg-black border-zinc-800">
                          <SelectItem value="SOL-USDC">SOL-USDC</SelectItem>
                          <SelectItem value="BTC-USDC">BTC-USDC</SelectItem>
                          <SelectItem value="ETH-USDC">ETH-USDC</SelectItem>
                          <SelectItem value="BLKBOX-USDC">BLKBOX-USDC</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-tech-mono text-neon-cyan">Timeframe</label>
                      <Select value={timeframe} onValueChange={setTimeframe}>
                        <SelectTrigger className="bg-black border-zinc-800">
                          <SelectValue placeholder="Select timeframe" />
                        </SelectTrigger>
                        <SelectContent className="bg-black border-zinc-800">
                          <SelectItem value="1m">1 minute</SelectItem>
                          <SelectItem value="5m">5 minutes</SelectItem>
                          <SelectItem value="15m">15 minutes</SelectItem>
                          <SelectItem value="1h">1 hour</SelectItem>
                          <SelectItem value="4h">4 hours</SelectItem>
                          <SelectItem value="1d">1 day</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <label className="text-sm font-tech-mono text-neon-cyan">Risk Level</label>
                        <span className="text-sm font-tech-mono text-neon-pink">{riskLevel}%</span>
                      </div>
                      <Slider
                        value={[riskLevel]}
                        min={10}
                        max={90}
                        step={10}
                        onValueChange={(value) => setRiskLevel(value[0])}
                        className="w-full"
                      />
                      <div className="flex justify-between text-xs text-zinc-500 font-tech-mono">
                        <span>Conservative</span>
                        <span>Moderate</span>
                        <span>Aggressive</span>
                      </div>
                    </div>

                    <CyberButton
                      onClick={generateStrategy}
                      disabled={isGenerating || !strategyPrompt}
                      glowColor="cyan"
                      className="w-full mt-4"
                    >
                      {isGenerating ? (
                        <>
                          <RefreshCw className="h-4 w-4 mr-2 animate-spin" /> GENERATING...
                        </>
                      ) : (
                        <>
                          <Sparkles className="h-4 w-4 mr-2" /> GENERATE STRATEGY
                        </>
                      )}
                    </CyberButton>
                  </div>
                </CyberCard>
              </div>

              <div className="md:col-span-2">
                <Tabs defaultValue="strategy" className="w-full">
                  <TabsList className="grid grid-cols-3 mb-6">
                    <TabsTrigger value="strategy" className="font-tech-mono">
                      STRATEGY
                    </TabsTrigger>
                    <TabsTrigger value="code" className="font-tech-mono">
                      CODE
                    </TabsTrigger>
                    <TabsTrigger value="backtest" className="font-tech-mono">
                      BACKTEST
                    </TabsTrigger>
                  </TabsList>

                  <TabsContent value="strategy">
                    <CyberCard className="bg-black/60 min-h-[500px]">
                      {isLoading ? (
                        <div className="flex flex-col items-center justify-center py-12">
                          <RefreshCw className="h-8 w-8 text-neon-cyan animate-spin mb-4" />
                          <p className="text-zinc-400 font-tech-mono">Loading AI Strategy Lab...</p>
                        </div>
                      ) : generatedStrategy ? (
                        <div className="prose prose-invert max-w-none">
                          <div className="font-tech-mono text-neon-cyan whitespace-pre-wrap">{generatedStrategy}</div>
                          <div className="flex justify-end mt-6">
                            <CyberButton variant="outline" size="sm" glowColor="pink" className="gap-2">
                              <Download className="h-4 w-4" /> EXPORT STRATEGY
                            </CyberButton>
                          </div>
                        </div>
                      ) : (
                        <div className="flex flex-col items-center justify-center py-12">
                          <Brain className="h-12 w-12 text-zinc-500 mb-4" />
                          <p className="text-zinc-400 font-tech-mono mb-2">No strategy generated yet</p>
                          <p className="text-zinc-500 text-sm text-center max-w-md">
                            Describe your trading strategy in natural language and set your parameters to generate a
                            custom algorithm
                          </p>
                        </div>
                      )}
                    </CyberCard>
                  </TabsContent>

                  <TabsContent value="code">
                    <CyberCard className="bg-black/60 min-h-[500px]">
                      {isLoading ? (
                        <div className="flex flex-col items-center justify-center py-12">
                          <RefreshCw className="h-8 w-8 text-neon-cyan animate-spin mb-4" />
                          <p className="text-zinc-400 font-tech-mono">Loading code generator...</p>
                        </div>
                      ) : generatedCode ? (
                        <div>
                          <TerminalCode code={generatedCode} />
                          <div className="flex justify-end mt-6">
                            <CyberButton variant="outline" size="sm" glowColor="cyan" className="gap-2">
                              <Code className="h-4 w-4" /> DEPLOY STRATEGY
                            </CyberButton>
                          </div>
                        </div>
                      ) : (
                        <div className="flex flex-col items-center justify-center py-12">
                          <Code className="h-12 w-12 text-zinc-500 mb-4" />
                          <p className="text-zinc-400 font-tech-mono mb-2">No code generated yet</p>
                          <p className="text-zinc-500 text-sm text-center max-w-md">
                            Generate a strategy first to see the corresponding code implementation
                          </p>
                        </div>
                      )}
                    </CyberCard>
                  </TabsContent>

                  <TabsContent value="backtest">
                    <CyberCard className="bg-black/60 min-h-[500px]">
                      {isLoading ? (
                        <div className="flex flex-col items-center justify-center py-12">
                          <RefreshCw className="h-8 w-8 text-neon-cyan animate-spin mb-4" />
                          <p className="text-zinc-400 font-tech-mono">Loading backtest engine...</p>
                        </div>
                      ) : backtestResults ? (
                        <div>
                          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Total Trades</p>
                              <p className="text-xl font-bold text-neon-cyan">{backtestResults.totalTrades}</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Win Rate</p>
                              <p className="text-xl font-bold text-neon-pink">{backtestResults.winRate}%</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Profit Factor</p>
                              <p className="text-xl font-bold text-neon-cyan">{backtestResults.profitFactor}</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Sharpe Ratio</p>
                              <p className="text-xl font-bold text-neon-pink">{backtestResults.sharpeRatio}</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Max Drawdown</p>
                              <p className="text-xl font-bold text-neon-cyan">{backtestResults.maxDrawdown}%</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Annual Return</p>
                              <p className="text-xl font-bold text-neon-pink">{backtestResults.annualizedReturn}%</p>
                            </div>
                          </div>

                          <div className="mb-6">
                            <h4 className="text-sm font-tech-mono text-neon-cyan mb-2">Monthly Returns (%)</h4>
                            <div className="flex items-end h-32 gap-1">
                              {backtestResults.monthlyReturns.map((value, index) => (
                                <div
                                  key={index}
                                  className="flex-1 relative group"
                                  style={{ height: `${Math.abs(value) * 5}%`, minHeight: "4px" }}
                                >
                                  <div
                                    className={`w-full absolute bottom-0 ${
                                      value >= 0 ? "bg-neon-cyan" : "bg-neon-pink"
                                    }`}
                                    style={{ height: "100%" }}
                                  ></div>
                                  <div className="opacity-0 group-hover:opacity-100 absolute -top-8 left-1/2 transform -translate-x-1/2 bg-black/80 px-2 py-1 rounded text-xs font-tech-mono">
                                    {value}%
                                  </div>
                                </div>
                              ))}
                            </div>
                            <div className="flex justify-between mt-2">
                              <span className="text-xs text-zinc-500 font-tech-mono">Jan</span>
                              <span className="text-xs text-zinc-500 font-tech-mono">Dec</span>
                            </div>
                          </div>

                          <div className="flex justify-end mt-6">
                            <CyberButton variant="outline" size="sm" glowColor="pink" className="gap-2">
                              <Play className="h-4 w-4" /> RUN LIVE TRADING
                            </CyberButton>
                          </div>
                        </div>
                      ) : (
                        <div className="flex flex-col items-center justify-center py-12">
                          <AlertCircle className="h-12 w-12 text-zinc-500 mb-4" />
                          <p className="text-zinc-400 font-tech-mono mb-2">No backtest results yet</p>
                          <p className="text-zinc-500 text-sm text-center max-w-md">
                            Generate a strategy first to see backtest results and performance metrics
                          </p>
                        </div>
                      )}
                    </CyberCard>
                  </TabsContent>
                </Tabs>
              </div>
            </div>
          </div>
        </TierGate>
      </main>

      <footer className="border-t border-neon-pink/30 py-6 bg-black">
        <div className="container text-center">
          <p className="text-sm text-zinc-500 font-tech-mono">© 2025 $BLKBOX. All rights reserved.</p>
        </div>
      </footer>
    </div>
  )
}
