"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { ArrowLeft, Lightbulb, RefreshCw, Code } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import CyberButton from "@/components/cyber-button"
import MatrixBackground from "@/components/matrix-background"
import CircuitPattern from "@/components/circuit-pattern"
import DataPulse from "@/components/data-pulse"
import GlitchText from "@/components/glitch-text"
import CyberCard from "@/components/cyber-card"
import TierGate from "@/components/tier-gate"
import { useWallet } from "@/context/wallet-context"
import WalletConnector from "@/components/wallet-connector"
import TerminalCode from "@/components/terminal-code"

export default function FlashloanLabPage() {
  const { connected, tier } = useWallet()
  const [isLoading, setIsLoading] = useState(true)
  const [isGenerating, setIsGenerating] = useState(false)
  const [selectedProtocol, setSelectedProtocol] = useState("aave")
  const [selectedStrategy, setSelectedStrategy] = useState("arbitrage")
  const [loanAmount, setLoanAmount] = useState("10000")
  const [loanToken, setLoanToken] = useState("USDC")
  const [customCode, setCustomCode] = useState("")
  const [generatedCode, setGeneratedCode] = useState<string | null>(null)
  const [simulationResult, setSimulationResult] = useState<any | null>(null)
  const [expandedSection, setExpandedSection] = useState<string | null>("settings")

  // Load initial data
  useEffect(() => {
    const loadData = async () => {
      setIsLoading(true)
      try {
        // Simulate API call delay
        await new Promise((resolve) => setTimeout(resolve, 1500))

        // Set initial custom code
        setCustomCode(`// Custom flashloan strategy
// Protocol: ${selectedProtocol}
// Strategy: ${selectedStrategy}
// Amount: ${loanAmount} ${loanToken}

async function executeFlashloan() {
  // Your custom logic here
  
  // 1. Borrow funds from lending protocol
  // 2. Execute arbitrage or other strategy
  // 3. Repay loan with fee
  // 4. Keep the profit
}`)
      } finally {
        setIsLoading(false)
      }
    }

    loadData()
  }, [])

  // Toggle section expansion
  const toggleSection = (section: string) => {
    if (expandedSection === section) {
      setExpandedSection(null)
    } else {
      setExpandedSection(section)
    }
  }

  // Handle protocol change
  const handleProtocolChange = (value: string) => {
    setSelectedProtocol(value)
    updateCustomCode(value, selectedStrategy, loanAmount, loanToken)
  }

  // Handle strategy change
  const handleStrategyChange = (value: string) => {
    setSelectedStrategy(value)
    updateCustomCode(selectedProtocol, value, loanAmount, loanToken)
  }

  // Handle loan amount change
  const handleLoanAmountChange = (value: string) => {
    setLoanAmount(value)
    updateCustomCode(selectedProtocol, selectedStrategy, value, loanToken)
  }

  // Handle loan token change
  const handleLoanTokenChange = (value: string) => {
    setLoanToken(value)
    updateCustomCode(selectedProtocol, selectedStrategy, loanAmount, value)
  }

  // Update custom code based on selections
  const updateCustomCode = (protocol: string, strategy: string, amount: string, token: string) => {
    setCustomCode(`// Custom flashloan strategy
// Protocol: ${protocol}
// Strategy: ${strategy}
// Amount: ${amount} ${token}

async function executeFlashloan() {
  // Your custom logic here
  
  // 1. Borrow funds from lending protocol
  // 2. Execute ${strategy} strategy
  // 3. Repay loan with fee
  // 4. Keep the profit
}`)
  }

  // Generate flashloan code
  const generateFlashloanCode = async () => {
    if (isGenerating) return

    setIsGenerating(true)
    setGeneratedCode(null)
    setSimulationResult(null)

    try {
      // Simulate API call delay
      await new Promise((resolve) => setTimeout(resolve, 2000))

      // Generate code based on selected options
      let code = ""

      if (selectedProtocol === "aave") {
        code = `// Aave Flashloan Strategy: ${selectedStrategy}
// Amount: ${loanAmount} ${loanToken}
// Generated by $BLKBOX Flashloan Lab

import { ethers } from "ethers";
import { FlashLoanReceiverBase } from "@aave/protocol-v2";

// Contract addresses
const LENDING_POOL_ADDRESS = "0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9";
const TOKEN_ADDRESS = "${
          loanToken === "USDC"
            ? "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
            : loanToken === "DAI"
              ? "0x6B175474E89094C44Da98b954EedeAC495271d0F"
              : "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
        }";
${
  selectedStrategy === "arbitrage"
    ? `const DEX1_ROUTER = "0xE592427A0AEce92De3Edee1F18E0157C05861564"; // Uniswap V3
const DEX2_ROUTER = "0x1111111254fb6c44bAC0beD2854e76F90643097d"; // 1inch`
    : ""
}

export class FlashloanStrategy extends FlashLoanReceiverBase {
  constructor(provider, address) {
    super(provider, address);
  }

  /**
   * This function is called after your contract has received the flash loaned amount
   */
  async executeOperation(
    assets,
    amounts,
    premiums,
    initiator,
    params
  ) {
    console.log(\`Flashloan received: \${ethers.utils.formatUnits(amounts[0], 6)} ${loanToken}\`);
    console.log(\`Fee: \${ethers.utils.formatUnits(premiums[0], 6)} ${loanToken}\`);
    
    // Get the borrowed amount + fee
    const amountOwed = amounts[0].add(premiums[0]);
    
    try {
      ${
        selectedStrategy === "arbitrage"
          ? `// 1. Execute arbitrage between exchanges
        console.log("Executing arbitrage strategy...");
        
        // Buy token on DEX1 at lower price
        const tokenToBuy = "0x..."; // Target token address
        await this.swapOnDex(
          DEX1_ROUTER,
          TOKEN_ADDRESS,
          tokenToBuy,
          amounts[0]
        );
        
        // Sell token on DEX2 at higher price
        const amountReceived = await this.swapOnDex(
          DEX2_ROUTER,
          tokenToBuy,
          TOKEN_ADDRESS,
          await this.getTokenBalance(tokenToBuy)
        );
        
        // Calculate profit
        const profit = amountReceived.sub(amountOwed);
        console.log(\`Profit: \${ethers.utils.formatUnits(profit, 6)} ${loanToken}\`);`
          : selectedStrategy === "liquidation"
            ? `// 1. Execute liquidation strategy
        console.log("Executing liquidation strategy...");
        
        // Find underwater position
        const positionToLiquidate = "0x..."; // Target position
        
        // Execute liquidation
        await this.liquidatePosition(
          positionToLiquidate,
          amounts[0]
        );
        
        // Calculate profit from liquidation bonus
        const liquidationBonus = await this.calculateLiquidationProfit();
        console.log(\`Liquidation bonus: \${ethers.utils.formatUnits(liquidationBonus, 6)} ${loanToken}\`);`
            : `// 1. Execute custom strategy
        console.log("Executing custom strategy...");
        
        // Your custom logic here
        // ...
        
        // Calculate profit
        const profit = ethers.BigNumber.from("1000000"); // Example profit of 1 USDC
        console.log(\`Profit: \${ethers.utils.formatUnits(profit, 6)} ${loanToken}\`);`
      }
      
      // 2. Approve the LendingPool contract to pull the owed amount
      await this.approveToken(TOKEN_ADDRESS, LENDING_POOL_ADDRESS, amountOwed);
      
      return true;
    } catch (error) {
      console.error("Error in flashloan execution:", error);
      throw error;
    }
  }
  
  ${
    selectedStrategy === "arbitrage"
      ? `async swapOnDex(routerAddress, tokenIn, tokenOut, amountIn) {
    // Implementation of swap on DEX
    console.log(\`Swapping \${ethers.utils.formatUnits(amountIn, 6)} on \${routerAddress}\`);
    // Mock implementation - in real scenario, this would call the DEX router
    return amountIn.mul(102).div(100); // Mock 2% profit
  }`
      : selectedStrategy === "liquidation"
        ? `async liquidatePosition(positionAddress, amount) {
    // Implementation of liquidation
    console.log(\`Liquidating position \${positionAddress} with \${ethers.utils.formatUnits(amount, 6)}\`);
    // Mock implementation
  }
  
  async calculateLiquidationProfit() {
    // Mock implementation
    return ethers.BigNumber.from("1500000"); // 1.5 USDC profit
  }`
        : ""
  }
  
  async getTokenBalance(tokenAddress) {
    const tokenContract = new ethers.Contract(
      tokenAddress,
      ["function balanceOf(address) view returns (uint256)"],
      this.provider
    );
    return await tokenContract.balanceOf(this.address);
  }
  
  async approveToken(tokenAddress, spender, amount) {
    const tokenContract = new ethers.Contract(
      tokenAddress,
      ["function approve(address, uint256) returns (bool)"],
      this.provider
    );
    return await tokenContract.approve(spender, amount);
  }
}

// How to use:
// 1. Deploy this contract
// 2. Fund it with a small amount of ETH for gas
// 3. Call the flashloan function with the desired parameters`
      } else if (selectedProtocol === "solend") {
        code = `// Solend Flashloan Strategy: ${selectedStrategy}
// Amount: ${loanAmount} ${loanToken}
// Generated by $BLKBOX Flashloan Lab

import { Connection, PublicKey, Transaction } from "@solana/web3.js";
import { FlashLoanReceiver } from "@solendprotocol/solend-sdk";

// Constants
const SOLEND_PROGRAM_ID = new PublicKey("So1endDq2YkqhipRh3WViPa8hdiSpxWy6z3Z6tMCpAo");
const RESERVE_ADDRESS = new PublicKey("${
          loanToken === "USDC"
            ? "BgxfHJDzm44T7XG68MYKx7YisTjZu73tVovyZSjJMpmw"
            : loanToken === "SOL"
              ? "8PbodeaosQP19SjYFx855UMqWxH2HynZLdBXmsrbac36"
              : "7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj"
        }");

export class SolendFlashloanStrategy {
  constructor(connection, wallet) {
    this.connection = connection;
    this.wallet = wallet;
    this.flashLoanReceiver = new FlashLoanReceiver(
      connection,
      SOLEND_PROGRAM_ID,
      wallet
    );
  }

  async executeFlashloan() {
    console.log(\`Executing flashloan for ${loanAmount} ${loanToken} on Solend\`);
    
    try {
      // 1. Prepare flashloan parameters
      const amount = ${loanAmount} * ${loanToken === "USDC" ? "1000000" : "1000000000"}; // Convert to proper decimals
      
      // 2. Execute flashloan
      const transaction = await this.flashLoanReceiver.createFlashLoanTransaction({
        reservePublicKey: RESERVE_ADDRESS,
        amount,
        // This callback contains the logic to execute during the flashloan
        flashLoanCallback: async (tx, flashLoanContext) => {
          ${
            selectedStrategy === "arbitrage"
              ? `// Execute arbitrage strategy
            console.log("Executing arbitrage between Jupiter and Raydium");
            
            // 1. Swap on Jupiter
            const jupiterSwapInstruction = await this.createJupiterSwapInstruction(
              flashLoanContext.tokenAccountPublicKey,
              amount
            );
            tx.add(jupiterSwapInstruction);
            
            // 2. Swap back on Raydium
            const raydiumSwapInstruction = await this.createRaydiumSwapInstruction();
            tx.add(raydiumSwapInstruction);`
              : selectedStrategy === "liquidation"
                ? `// Execute liquidation strategy
            console.log("Executing liquidation on Solend");
            
            // Find underwater position
            const liquidationInstruction = await this.createLiquidationInstruction(
              flashLoanContext.tokenAccountPublicKey
            );
            tx.add(liquidationInstruction);`
                : `// Execute custom strategy
            console.log("Executing custom strategy");
            
            // Add your custom instructions here
            // const customInstruction = ...
            // tx.add(customInstruction);`
          }
          
          return tx;
        }
      });
      
      // 3. Sign and send transaction
      const signature = await this.wallet.sendTransaction(transaction, this.connection);
      console.log("Flashloan executed successfully:", signature);
      
      // 4. Get transaction result
      const result = await this.connection.confirmTransaction(signature);
      return {
        success: true,
        signature,
        profit: "${(Number.parseFloat(loanAmount) * 0.02).toFixed(2)} ${loanToken}" // Mock profit
      };
    } catch (error) {
      console.error("Error executing flashloan:", error);
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  ${
    selectedStrategy === "arbitrage"
      ? `async createJupiterSwapInstruction(sourceTokenAccount, amount) {
    // Mock implementation - in real scenario, this would call Jupiter API
    console.log(\`Creating Jupiter swap instruction for \${amount / ${loanToken === "USDC" ? "1000000" : "1000000000"}} ${loanToken}\`);
    return new Transaction().add({
      keys: [],
      programId: new PublicKey("JUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB")
    });
  }
  
  async createRaydiumSwapInstruction() {
    // Mock implementation
    console.log("Creating Raydium swap instruction");
    return new Transaction().add({
      keys: [],
      programId: new PublicKey("675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8")
    });
  }`
      : selectedStrategy === "liquidation"
        ? `async createLiquidationInstruction(sourceTokenAccount) {
    // Mock implementation
    console.log("Creating liquidation instruction");
    return new Transaction().add({
      keys: [],
      programId: SOLEND_PROGRAM_ID
    });
  }`
        : ""
  }
}

// How to use:
// 1. Create a connection to Solana
// 2. Initialize your wallet
// 3. Create an instance of SolendFlashloanStrategy
// 4. Call executeFlashloan()`
      } else {
        code = customCode
      }

      setGeneratedCode(code)

      // Generate simulation result
      const profit = Number.parseFloat(loanAmount) * (Math.random() * 0.03 + 0.01)
      const fee = Number.parseFloat(loanAmount) * 0.0009

      setSimulationResult({
        success: Math.random() > 0.2,
        profit: profit.toFixed(2),
        fee: fee.toFixed(2),
        netProfit: (profit - fee).toFixed(2),
        executionTime: Math.floor(Math.random() * 5000 + 1000),
        gasUsed: Math.floor(Math.random() * 500000 + 200000),
        transactions: [
          {
            type: "flashloan",
            amount: loanAmount,
            token: loanToken,
            status: "success",
          },
          {
            type: selectedStrategy,
            amount: (Number.parseFloat(loanAmount) * 1.02).toFixed(2),
            token: loanToken,
            status: "success",
          },
          {
            type: "repayment",
            amount: (Number.parseFloat(loanAmount) * 1.0009).toFixed(2),
            token: loanToken,
            status: "success",
          },
        ],
      })
    } catch (error) {
      console.error("Error generating flashloan code:", error)
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className="flex min-h-screen flex-col bg-black text-white">
      <MatrixBackground />
      <CircuitPattern />

      {/* Navigation */}
      <header className="sticky top-0 z-50 border-b border-neon-pink/30 bg-black/80 backdrop-blur-md">
        <div className="container flex h-16 items-center justify-between">
          <Link
            href="/dashboard"
            className="flex items-center gap-2 text-neon-cyan hover:text-neon-pink transition-colors"
          >
            <ArrowLeft size={16} />
            <span className="font-tech-mono">BACK_TO_DASHBOARD</span>
          </Link>

          <WalletConnector buttonSize="sm" glowColor="cyan" />
        </div>
      </header>

      <main className="flex-1 container py-12">
        <TierGate requiredTier="SHADOW_COUNCIL">
          <div className="max-w-6xl mx-auto">
            <div className="mb-8 text-center">
              <GlitchText
                text="FLASHLOAN LAB"
                className="text-3xl font-extrabold tracking-tight sm:text-4xl text-neon-pink mb-4"
              />
              <p className="text-neon-cyan font-tech-mono">CREATE AND TEST FLASHLOAN STRATEGIES</p>
              <DataPulse className="my-6" />
            </div>

            <div className="grid md:grid-cols-3 gap-6">
              <div className="md:col-span-1">
                <CyberCard className="bg-black/60">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="p-3 rounded-full bg-neon-pink/10">
                      <Lightbulb className="h-6 w-6 text-neon-pink" />
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-neon-pink">Strategy Builder</h3>
                      <p className="text-zinc-400 font-tech-mono text-sm">Create flashloan strategies</p>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div className="space-y-2">
                      <label className="text-sm font-tech-mono text-neon-cyan">Protocol</label>
                      <Select value={selectedProtocol} onValueChange={handleProtocolChange}>
                        <SelectTrigger className="bg-black border-zinc-800">
                          <SelectValue placeholder="Select protocol" />
                        </SelectTrigger>
                        <SelectContent className="bg-black border-zinc-800">
                          <SelectItem value="aave">Aave (Ethereum)</SelectItem>
                          <SelectItem value="solend">Solend (Solana)</SelectItem>
                          <SelectItem value="custom">Custom Protocol</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-tech-mono text-neon-cyan">Strategy Type</label>
                      <Select value={selectedStrategy} onValueChange={handleStrategyChange}>
                        <SelectTrigger className="bg-black border-zinc-800">
                          <SelectValue placeholder="Select strategy" />
                        </SelectTrigger>
                        <SelectContent className="bg-black border-zinc-800">
                          <SelectItem value="arbitrage">Arbitrage</SelectItem>
                          <SelectItem value="liquidation">Liquidation</SelectItem>
                          <SelectItem value="custom">Custom Strategy</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <label className="text-sm font-tech-mono text-neon-cyan">Loan Amount</label>
                        <Input
                          type="text"
                          value={loanAmount}
                          onChange={(e) => handleLoanAmountChange(e.target.value)}
                          className="bg-black border-zinc-800"
                        />
                      </div>
                      <div className="space-y-2">
                        <label className="text-sm font-tech-mono text-neon-cyan">Token</label>
                        <Select value={loanToken} onValueChange={handleLoanTokenChange}>
                          <SelectTrigger className="bg-black border-zinc-800">
                            <SelectValue placeholder="Select token" />
                          </SelectTrigger>
                          <SelectContent className="bg-black border-zinc-800">
                            <SelectItem value="USDC">USDC</SelectItem>
                            <SelectItem value="DAI">DAI</SelectItem>
                            <SelectItem value="ETH">ETH</SelectItem>
                            <SelectItem value="SOL">SOL</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <CyberButton
                      onClick={generateFlashloanCode}
                      disabled={isGenerating}
                      glowColor="cyan"
                      className="w-full mt-4"
                    >
                      {isGenerating ? (
                        <>
                          <RefreshCw className="h-4 w-4 mr-2 animate-spin" /> GENERATING...
                        </>
                      ) : (
                        <>
                          <Code className="h-4 w-4 mr-2" /> GENERATE CODE
                        </>
                      )}
                    </CyberButton>
                  </div>
                </CyberCard>

                {selectedProtocol === "custom" && (
                  <CyberCard className="bg-black/60 mt-6">
                    <h3 className="text-lg font-bold text-neon-cyan mb-4">Custom Code</h3>
                    <Textarea
                      value={customCode}
                      onChange={(e) => setCustomCode(e.target.value)}
                      className="bg-black border-zinc-800 min-h-[200px] font-mono text-sm"
                    />
                  </CyberCard>
                )}
              </div>

              <div className="md:col-span-2">
                <Tabs defaultValue="code" className="w-full">
                  <TabsList className="grid grid-cols-3 mb-6">
                    <TabsTrigger value="code" className="font-tech-mono">
                      CODE
                    </TabsTrigger>
                    <TabsTrigger value="simulation" className="font-tech-mono">
                      SIMULATION
                    </TabsTrigger>
                    <TabsTrigger value="history" className="font-tech-mono">
                      HISTORY
                    </TabsTrigger>
                  </TabsList>

                  <TabsContent value="code">
                    <CyberCard className="bg-black/60 min-h-[500px]">
                      {isLoading ? (
                        <div className="flex flex-col items-center justify-center py-12">
                          <RefreshCw className="h-8 w-8 text-neon-cyan animate-spin mb-4" />
                          <p className="text-zinc-400 font-tech-mono">Loading flashloan lab...</p>
                        </div>
                      ) : generatedCode ? (
                        <div>
                          <TerminalCode code={generatedCode} />
                          <div className="flex justify-end mt-6">
                            <CyberButton variant="outline" size="sm" glowColor="cyan" className="gap-2">
                              <Code className="h-4 w-4" /> DEPLOY STRATEGY
                            </CyberButton>
                          </div>
                        </div>
                      ) : (
                        <div className="flex flex-col items-center justify-center py-12">
                          <Code className="h-12 w-12 text-zinc-500 mb-4" />
                          <p className="text-zinc-400 font-tech-mono mb-2">No code generated yet</p>
                          <p className="text-zinc-500 text-sm text-center max-w-md">
                            Configure your flashloan parameters and click "Generate Code" to create a strategy
                          </p>
                        </div>
                      )}
                    </CyberCard>
                  </TabsContent>

                  <TabsContent value="simulation">
                    <CyberCard className="bg-black/60 min-h-[500px]">
                      {isLoading ? (
                        <div className="flex flex-col items-center justify-center py-12">
                          <RefreshCw className="h-8 w-8 text-neon-cyan animate-spin mb-4" />
                          <p className="text-zinc-400 font-tech-mono">Loading simulation engine...</p>
                        </div>
                      ) : simulationResult ? (
                        <div>
                          <h3 className="text-xl font-bold text-neon-pink mb-6">Simulation Results</h3>

                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Status</p>
                              <p
                                className={`text-xl font-bold ${simulationResult.success ? "text-green-500" : "text-red-500"}`}
                              >
                                {simulationResult.success ? "SUCCESS" : "FAILED"}
                              </p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Profit</p>
                              <p className="text-xl font-bold text-neon-cyan">${simulationResult.profit}</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Fee</p>
                              <p className="text-xl font-bold text-neon-pink">${simulationResult.fee}</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Net Profit</p>
                              <p className="text-xl font-bold text-green-500">${simulationResult.netProfit}</p>
                            </div>
                          </div>

                          <div className="mb-6">
                            <h4 className="text-lg font-bold text-neon-cyan mb-4">Transaction Flow</h4>
                            <div className="space-y-4">
                              {simulationResult.transactions.map((tx: any, index: number) => (
                                <div key={index} className="p-4 border border-zinc-800 rounded-md">
                                  <div className="flex justify-between items-center">
                                    <div>
                                      <p className="text-sm font-bold text-white capitalize">{tx.type}</p>
                                      <p className="text-xs text-zinc-400 font-tech-mono">
                                        {tx.amount} {tx.token}
                                      </p>
                                    </div>
                                    <div
                                      className={`text-xs font-tech-mono ${tx.status === "success" ? "text-green-500" : "text-red-500"}`}
                                    >
                                      {tx.status.toUpperCase()}
                                    </div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>

                          <div className="grid grid-cols-2 gap-4 mb-6">
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Execution Time</p>
                              <p className="text-sm font-tech-mono text-white">{simulationResult.executionTime} ms</p>
                            </div>
                            <div className="p-4 border border-zinc-800 rounded-md">
                              <p className="text-xs text-zinc-400 font-tech-mono">Gas Used</p>
                              <p className="text-sm font-tech-mono text-white">{simulationResult.gasUsed} gas</p>
                            </div>
                          </div>

                          <div className="flex justify-end">
                            <CyberButton glowColor="pink" className="gap-2">
                              <Lightbulb className="h-4 w-4" /> EXECUTE LIVE
                            </CyberButton>
                          </div>
                        </div>
                      ) : (
                        <div className="flex flex-col items-center justify-center py-12">
                          <RefreshCw className="h-12 w-12 text-zinc-500 mb-4" />
                          <p className="text-zinc-400 font-tech-mono mb-2">No simulation results yet</p>
                          <p className="text-zinc-500 text-sm text-center max-w-md">
                            Generate a flashloan strategy first to run a simulation
                          </p>
                        </div>
                      )}
                    </CyberCard>
                  </TabsContent>

                  <TabsContent value="history">
                    <CyberCard className="bg-black/60 min-h-[500px]">
                      <div className="flex flex-col items-center justify-center py-12">
                        <Code className="h-12 w-12 text-zinc-500 mb-4" />
                        <p className="text-zinc-400 font-tech-mono mb-2">No execution history yet</p>
                        <p className="text-zinc-500 text-sm text-center max-w-md">
                          Your executed flashloan strategies will appear here
                        </p>
                      </div>
                    </CyberCard>
                  </TabsContent>
                </Tabs>
              </div>
            </div>
          </div>
        </TierGate>
      </main>

      <footer className="border-t border-neon-pink/30 py-6 bg-black">
        <div className="container text-center">
          <p className="text-sm text-zinc-500 font-tech-mono">© 2025 $BLKBOX. All rights reserved.</p>
        </div>
      </footer>
    </div>
  )
}
